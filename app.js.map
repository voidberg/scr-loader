{"version":3,"sources":["app/initialize.js"],"names":["canvas","cw","ch","cx","scale","imageData","colorData","pixmap","colors","tape$","dataPos","colorPos","INTERVAL_COLOR","INTERVAL_IMAGE","SIMULATE_TAPE","getY","offset","getX","drawImageStart","chunks","chunk","Observable","from","zip","interval","x","y","subscribe","drawImage","undefined","drawImageEnd","drawColorsStart","bytes","color","forEach","data","currentByte","beginPath","fillStyle","fillRect","drawColors","ux","uy","w","h","document","addEventListener","getElementById","getContext","width","height","i","fetch","then","response","reader","body","getReader","read","result","value","slice","catch","err","console","log"],"mappings":"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","file":"public/app.js","sourcesContent":["import _ from 'lodash';\nimport Rx from 'rxjs';\n\nlet canvas;\nlet cw;\nlet ch;\nlet cx;\n\nconst scale = 3;\n\nlet imageData;\nlet colorData;\nconst pixmap = [];\nconst colors = [\n  'black',\n  'blue',\n  'darkred',\n  'darkmagenta',\n  'green',\n  'cyan',\n  'yellow',\n  'whitesmoke',\n  'black',\n  'lightblue',\n  'red',\n  'magenta',\n  'greenyellow',\n  'lightcyan',\n  'lightyellow',\n  'white',    \n];\n\nlet tape$;\nlet dataPos = 0;\nlet colorPos = 0;\nconst INTERVAL_COLOR = 50;\nconst INTERVAL_IMAGE = 50;\nconst SIMULATE_TAPE = true;\n\nconst getY = (offset) => {\n  return ((offset >> 11) << 6)\n      + ((offset % 2048) >> 8)\n      + ((((offset % 2048) >> 5) - ((offset % 2048) >> 8 << 3)) << 3);\n}\n\nconst getX = (offset) => {\n  return (offset % 32) << 3;\n}\n\nconst drawImageStart = () => {\n  const chunks = _.chunk(imageData, 16);\n  tape$ = new Rx.Observable.from(chunks);\n\n  if (SIMULATE_TAPE) {\n    tape$.zip(Rx.Observable.interval(INTERVAL_IMAGE), function(x, y) { return x; })\n      .subscribe(drawImage, undefined, drawImageEnd);\n  } else {\n    tape$\n      .subscribe(drawImage, undefined, drawImageEnd);\n  }\n};\n\nconst drawImageEnd = () => {\n  drawColorsStart();\n};\n\nconst drawImage = (bytes) => {\n  let color;\n\n  bytes.forEach((data) => {\n    pixmap[getX(dataPos) >> 3][getY(dataPos)] = data;\n    \n    for(var currentByte=0; currentByte < 8; currentByte++) {\n      const x = getX(dataPos) + currentByte;\n      const y = getY(dataPos);\n\n      if ((data & (128 >> currentByte))) {\n        color = colors[7];\n      } else {\n        color = colors[0];\n      }\n\n      cx.beginPath();\n      cx.fillStyle = color;\n      cx.fillRect(x * scale, y * scale, scale, scale);\n    }\n\n    dataPos++;\n  });\n};\n\nconst drawColorsStart = () => {\n  const chunks = _.chunk(colorData, 16);\n  tape$ = new Rx.Observable.from(chunks);\n\n  if (SIMULATE_TAPE) {\n    tape$.zip(Rx.Observable.interval(INTERVAL_COLOR), function(x, y) { return x; })\n      .subscribe(drawColors);\n  } else {\n    tape$\n      .subscribe(drawColors);\n  }\n};\n\nconst drawColors = (bytes) => {\n  let color;\n\n  bytes.forEach((data) => {\n    for(let y=0; y<8; y++) {\n      for(let x=0; x<8; x++) {\n        if ((pixmap[(colorPos % 32)][((colorPos >> 5) << 3) + y]) & (128 >> x)) {\n          color = colors[(data & 7) + 8 * (data >> 6 & 1)];\n        } else {\n          color = colors[(data >> 3 & 7) + 8 * (data >> 6 & 1)];\n        }\n\n        cx.beginPath();\n        cx.fillStyle = color;\n\n        const ux = ((colorPos % 32) << 3) + x;\n        const uy = ((colorPos >> 5) << 3) + y;\n        const w = ((colorPos % 32) << 3) + x + 1 - ((colorPos % 32) << 3) + x;\n        const h = ((colorPos / 32) << 3) + y + 1 - ((colorPos >> 5) << 3) + y;\n\n        cx.fillRect(ux * scale, uy * scale, w * scale, h * scale);\n      }\n    }\n\n    colorPos++;\n  });\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  canvas = document.getElementById('canvas');\n  cx = canvas.getContext('2d');\n  cw = canvas.width;\n  ch = canvas.height;\n\n  for (var i = 0; i < 32; i++) {\n    pixmap[i] = [];\n  }\n\n  fetch('./GlugGlug.scr')  \n    .then(function(response) {\n      var reader = response.body.getReader();\n\n      reader.read().then(function(result) {\n        imageData = result.value.slice(0, 6144);\n        colorData = result.value.slice(6144);\n  \n        drawImageStart();\n      });\n    })  \n    .catch(function(err) {  \n      console.log('Fetch Error :-S', err);  \n    });\n});\n"]}
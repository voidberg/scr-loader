{"version":3,"sources":["app/initialize.js"],"names":[],"mappingsjJA;AAAA","file":"public/app.js","sourcesContent":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _rxjs = require('rxjs');\n\nvar _rxjs2 = _interopRequireDefault(_rxjs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar canvas = void 0;\nvar cw = void 0;\nvar ch = void 0;\nvar cx = void 0;\n\nvar scale = 3;\n\nvar imageData = void 0;\nvar colorData = void 0;\nvar pixmap = [];\nvar colors = ['black', 'blue', 'darkred', 'darkmagenta', 'green', 'cyan', 'yellow', 'whitesmoke', 'black', 'lightblue', 'red', 'magenta', 'greenyellow', 'lightcyan', 'lightyellow', 'white'];\n\nvar tape$ = void 0;\nvar dataPos = 0;\nvar colorPos = 0;\nvar INTERVAL_COLOR = 50;\nvar INTERVAL_IMAGE = 50;\nvar SIMULATE_TAPE = true;\n\nvar getY = function getY(offset) {\n  return (offset >> 11 << 6) + (offset % 2048 >> 8) + ((offset % 2048 >> 5) - (offset % 2048 >> 8 << 3) << 3);\n};\n\nvar getX = function getX(offset) {\n  return offset % 32 << 3;\n};\n\nvar drawImageStart = function drawImageStart() {\n  var chunks = _lodash2.default.chunk(imageData, 16);\n  tape$ = new _rxjs2.default.Observable.from(chunks);\n\n  if (SIMULATE_TAPE) {\n    tape$.zip(_rxjs2.default.Observable.interval(INTERVAL_IMAGE), function (x, y) {\n      return x;\n    }).subscribe(drawImage, undefined, drawImageEnd);\n  } else {\n    tape$.subscribe(drawImage, undefined, drawImageEnd);\n  }\n};\n\nvar drawImageEnd = function drawImageEnd() {\n  drawColorsStart();\n};\n\nvar drawImage = function drawImage(bytes) {\n  var color = void 0;\n\n  bytes.forEach(function (data) {\n    pixmap[getX(dataPos) >> 3][getY(dataPos)] = data;\n\n    for (var currentByte = 0; currentByte < 8; currentByte++) {\n      var x = getX(dataPos) + currentByte;\n      var y = getY(dataPos);\n\n      if (data & 128 >> currentByte) {\n        color = colors[7];\n      } else {\n        color = colors[0];\n      }\n\n      cx.beginPath();\n      cx.fillStyle = color;\n      cx.fillRect(x * scale, y * scale, scale, scale);\n    }\n\n    dataPos++;\n  });\n};\n\nvar drawColorsStart = function drawColorsStart() {\n  var chunks = _lodash2.default.chunk(colorData, 16);\n  tape$ = new _rxjs2.default.Observable.from(chunks);\n\n  if (SIMULATE_TAPE) {\n    tape$.zip(_rxjs2.default.Observable.interval(INTERVAL_COLOR), function (x, y) {\n      return x;\n    }).subscribe(drawColors);\n  } else {\n    tape$.subscribe(drawColors);\n  }\n};\n\nvar drawColors = function drawColors(bytes) {\n  var color = void 0;\n\n  bytes.forEach(function (data) {\n    for (var y = 0; y < 8; y++) {\n      for (var x = 0; x < 8; x++) {\n        if (pixmap[colorPos % 32][(colorPos >> 5 << 3) + y] & 128 >> x) {\n          color = colors[(data & 7) + 8 * (data >> 6 & 1)];\n        } else {\n          color = colors[(data >> 3 & 7) + 8 * (data >> 6 & 1)];\n        }\n\n        cx.beginPath();\n        cx.fillStyle = color;\n\n        var ux = (colorPos % 32 << 3) + x;\n        var uy = (colorPos >> 5 << 3) + y;\n        var w = (colorPos % 32 << 3) + x + 1 - (colorPos % 32 << 3) + x;\n        var h = (colorPos / 32 << 3) + y + 1 - (colorPos >> 5 << 3) + y;\n\n        cx.fillRect(ux * scale, uy * scale, w * scale, h * scale);\n      }\n    }\n\n    colorPos++;\n  });\n};\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  canvas = document.getElementById('canvas');\n  cx = canvas.getContext('2d');\n  cw = canvas.width;\n  ch = canvas.height;\n\n  for (var i = 0; i < 32; i++) {\n    pixmap[i] = [];\n  }\n\n  fetch('./GlugGlug.scr').then(function (response) {\n    var reader = response.body.getReader();\n\n    reader.read().then(function (result) {\n      imageData = result.value.slice(0, 6144);\n      colorData = result.value.slice(6144);\n\n      drawImageStart();\n    });\n  }).catch(function (err) {\n    console.log('Fetch Error :-S', err);\n  });\n});\n"]}